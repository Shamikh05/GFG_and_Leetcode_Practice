/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int widthOfBinaryTree(TreeNode* root) {
        
        queue<pair<TreeNode*, int> > q;
        
        q.push({root,0});
        
        int ans = 0;
        
        
        while(!q.empty()) {
            
            int n = q.size();
            int min_idx = q.front().second;
            int first, last;
            
            for(int i=0;i<n;i++) {
                
                int curr_idx = q.front().second - min_idx;
                
                auto front = q.front().first;
                q.pop();
                
                if(i==0) first = curr_idx;
                if(i==n-1) last = curr_idx;
                
                if(front->left) q.push({front->left, 2*curr_idx+1});
                if(front->right) q.push({front->right, 2*curr_idx+2});
                
            }
            
            ans = max(ans, last - first + 1);
        }
        
        return ans;
        
    }
};
