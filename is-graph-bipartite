class Solution {
private:
    bool compute(int i, vector<vector<int>>& graph, vector<int> &color) {
        
        color[i] = 0;
        
        queue<int> q;
        q.push(i);
        
        while(!q.empty()) {
            
            int node = q.front();
            q.pop();
            
            for(auto it : graph[node]) {
                
                if(color[it] == color[node]) {
                    return false;
                }
                else if(color[it] == -1) {
                    color[it] = 1 - color[node];
                    q.push(it);
                }
            }
        }
        
        return true;
    }
public:
    bool isBipartite(vector<vector<int>>& graph) {
        
        int n = graph.size();
        
        vector<int> color(n, -1);
        
        
        for(int i=0;i<n;++i) {
            
            if(color[i]==-1) {
                
                if(!compute(i, graph, color)) return false; 
            }
        }
        
        return true;
    }
};
