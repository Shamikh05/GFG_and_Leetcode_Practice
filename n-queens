class Solution {
private:
    bool isPossibleToPlace(int row, int col, vector<string> &temp, int n) {
        
        int dupRow = row;
        int dupCol = col;
        
        // Check for upper left diagonal
        while(row >= 0 and col >= 0) {
            
            if(temp[row][col]=='Q') {
                return false;
            }
            
            --row;
            --col;
        }
        
        row = dupRow;
        col = dupCol;
        
        // Check for left boxes
        while(col >= 0) {
            
            if(temp[row][col]=='Q') {
                return false;
            }
            
            --col;
        }
        
        row = dupRow;
        col = dupCol;
        
        // Check for lower left diagonal
        while(row < n and col >= 0) {
            
            if(temp[row][col]=='Q') {
                return false;
            }
            
            ++row;
            --col;
        }
        
        return true;
    }
    
    void computeQueens(int col, int n, vector<string> &temp, vector<vector<string> > &ans) {
        
        if(col==n) {
            ans.push_back(temp);
            return;
        }
        
        for(int i=0;i<n;++i) {
            
            if(isPossibleToPlace(i, col, temp, n)) {
                
                temp[i][col] = 'Q';
                computeQueens(col+1, n, temp, ans);
                temp[i][col] = '.';
            }
        }
    }
public:
    vector<vector<string>> solveNQueens(int n) {
        
        vector<vector<string> > ans;
        vector<string> temp(n);
        
        string s(n, '.');
        
        for(int i=0;i<n;++i) {
            temp[i] = s;
        }
        
        computeQueens(0, n, temp, ans);
        
        return ans;
    }
};
