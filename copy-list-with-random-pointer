/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* next;
    Node* random;
    
    Node(int _val) {
        val = _val;
        next = NULL;
        random = NULL;
    }
};
*/

class Solution {
public:
    Node* copyRandomList(Node* head) {
        
        Node ans(-1);
        Node* newHead = &ans;
        
        Node *ptr1 = head;
        
        int i = 0;
        
        unordered_map<Node*, int> mp2;
        
        while(head) {
            
            mp2[head] = i++;
            
            newHead->next = new Node(head->val);
            
            newHead = newHead->next;
            head = head->next;
        }
        
        Node* ptr2 = &ans;
        ptr2 = ptr2->next;
        
        unordered_map<int, Node*> mp;
        
        i = 0;
        
        while(ptr2) {
            mp[i++] = ptr2;
            ptr2 = ptr2->next;
        }
        
        ptr2 = &ans;
        ptr2 = ptr2->next;
        
        while(ptr1) {
            
            if(ptr1->random==NULL)
                ptr2->random = NULL;
            else
                ptr2->random = mp[mp2[ptr1->random]];
            
            ptr1 = ptr1->next;
            ptr2 = ptr2->next;
        }
        
        
        
        return ans.next;
    }
};
