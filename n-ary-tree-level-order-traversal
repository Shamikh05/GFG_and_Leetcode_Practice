/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> children;

    Node() {}

    Node(int _val) {
        val = _val;
    }

    Node(int _val, vector<Node*> _children) {
        val = _val;
        children = _children;
    }
};
*/

class Solution {
public:
    vector<vector<int>> levelOrder(Node* root) {
        if(root==NULL) {
            return {};
        }
        
        queue<Node*> bfs;
        bfs.push(root);
        bfs.push(NULL);
        
        vector<int> temp;
        vector<vector<int> > ans;
        
        while(!bfs.empty()) {
            Node *currNode = bfs.front();
            bfs.pop();
            
            if(currNode != NULL) {
                int currVal = currNode->val;
                vector<Node*> addr = currNode->children;
                temp.push_back(currVal);
                for(Node* child : addr) {
                    bfs.push(child);
                }
            }
            else {
                ans.push_back(temp);
                temp.clear();
                
                if(!bfs.empty()) {
                    bfs.push(NULL);
                }
            }
        }
        return ans;
    }
};
