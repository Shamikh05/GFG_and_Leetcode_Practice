/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
private:
    ListNode* reverseLL(ListNode* root) {
        
        if(root==NULL || root->next==NULL)
            return root;
        
        ListNode *curr = root;
        ListNode *next;
        ListNode *prev = NULL;
        
        while(curr) {
            next = curr->next;
            curr->next = prev;
            prev = curr;
            curr = next;
        }
        
        return prev;
    } 
public:
    bool isPalindrome(ListNode* head) {
        
        if(head==NULL or head->next==NULL)
            return true;
        
        else if(head->next->next==NULL) {
            
            int firstValue = head->val;
            int secondValue = head->next->val;
            
            if(firstValue==secondValue) {
                return true;
            }
            else
                return false;
        }
        
        ListNode* slow = head;
        ListNode* fast = head;
        
        while(fast->next and fast->next->next) {
            slow = slow->next;
            fast = fast->next->next;
        }
        
        slow->next = reverseLL(slow->next);
        
        
        ListNode* p1 = head;
        ListNode* p2 = slow->next;
        
        
        while(p2) {
            
            if(p1->val != p2->val) {
                return false;
            }
            
            p1 = p1->next;
            p2 = p2->next;
        }
        
        
        return true;
        
    }
};
