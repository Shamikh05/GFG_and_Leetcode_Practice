class Solution {
public:
    int minCostConnectPoints(vector<vector<int>>& points) {
        
        int n = points.size();
        
        vector<pair<int, int> > adj[n];
        
        int x1, x2, y1, y2, wt;
        
        for(int i=0;i<n;++i) {
            
            x1 = points[i][0];
            y1 = points[i][1];
            
            for(int j=0;j<n;++j) {
                    
                if(i != j) {
                    
                    x2 = points[j][0];
                    y2 = points[j][1];
                    
                    wt = abs(x1-x2) + abs(y1-y2);
                    
                    adj[i].push_back({j,wt});
                    adj[j].push_back({i,wt});
                }
            }
        }
        
        vector<int> key(n, INT_MAX);
        vector<int> parent(n, -1);
        vector<int> mst(n,0);

        key[0] = 0;

        for(int i=0;i<n-1;++i) {

                int minKey = INT_MAX;
                int minKeyIdx = -1;


                for(int j=0;j<n;++j) {

                        if(key[j] < minKey and mst[j]==0) {
                                minKey = key[j];
                                minKeyIdx = j;
                        }
                }

                mst[minKeyIdx] = 1;

                for(auto it : adj[minKeyIdx]) {

                        int node = it.first;
                        int weight = it.second;

                        if(mst[node]==0 and weight < key[node]) {
                                key[node] = weight;
                                parent[node] = minKeyIdx;
                        }
                }
        }
        
        int ans = 0;
        
        for(int num : key) 
            ans += num;
        
        return ans;
    }
};
