class Solution {
    int compute(int n, vector<int> &v, vector<int> &dp) {
        
        if(n==0) 
            return 0;
        
        if(dp[n] != -1) 
            return dp[n];
        
        int min_state = INT_MAX;
        
        for(int i=0;i<v.size();++i) {
            
            int curr_state;
            
            if(v[i] <= n) {
                curr_state = compute(n-v[i], v, dp);
            }
            
            min_state = min(min_state, curr_state);
        }
        
        return dp[n] = 1 + min_state;
    }
public:
    int numSquares(int n) {
        
        vector<int> v;
        
        vector<int> dp(n+1,-1);
        
        int i;
        
        for(i=1;i*i<n;++i) {
            v.push_back(i*i);
        }
        
        if(i*i==n) 
            return 1;
        
        int ans = compute(n, v, dp);
        
        return ans;
    }
};
