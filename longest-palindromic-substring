class Solution {
public:
    string longestPalindrome(string s) {
        
        int n = s.size();
        
        vector<vector<int> > dp(n,vector<int>(n,-1));
        
        int i, j;
        
        
        for(i=0;i<n;i++) {
            
            for(j=0;j<n-i;j++) {
                
                if(i==0) dp[j][j] = 1;
                
                else if(i==1)  {
                    
                    if(s[j]!=s[j+i]) dp[j][j+1] = 0;
                    else dp[j][j+1] = 1;
                }
                
                else {
                    if(s[j] != s[j+i]) dp[j][j+i] = 0;
                    else dp[j][j+i] = dp[j+1][j+i-1];
                }
            }
        }
        
        int len = 0;
        int maxLen = 0;
        
        int start, end;
        
        for(i=0;i<n;i++) {
            
            for(j=0;j<n;j++) {
                
                if(dp[i][j]==1) {
                    
                    len = j - i + 1;
                    
                    if(len > maxLen) {
                        
                        start = i;
                        end = j;
                        
                        maxLen = len;
                    }
                }
            }
        }
        
        return s.substr(start, end - start + 1);
        
    }
};
