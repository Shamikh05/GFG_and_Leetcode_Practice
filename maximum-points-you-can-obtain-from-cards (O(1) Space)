class Solution {
public:
    int maxScore(vector<int>& cardPoints, int k) {
        
        int n = cardPoints.size();
        
        int leftSum = 0;
        int rightSum = 0;
        
        for(int i=n-1;i>=(n-k);--i) {
            rightSum += cardPoints[i];
        }
        
        int leftIdx = -1;
        int rightIdx = n - k;
        
        int maxScore = INT_MIN;
        
        while(rightIdx <= n) {
            
            int scoreFromLeft = (leftIdx != -1) ? leftSum : 0;
            int scoreFromRight = (rightIdx != n) ? rightSum : 0;
            
            int currScore = scoreFromLeft + scoreFromRight;
            
            maxScore = max(maxScore, currScore);
            
            ++leftIdx;
            leftSum += cardPoints[leftIdx];
            
            if(rightIdx < n) rightSum -= cardPoints[rightIdx];
            ++rightIdx;
        }
        
        return maxScore;
    }
};
