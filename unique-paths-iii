class Solution {
private:
    int dfs(vector<vector<int> > &grid, int x, int y, int m, int n, int zeroes) {
        
        if(x<0 or y<0 or x>=m or y>=n or grid[x][y]==-1)
            return 0;
        
        if(grid[x][y]==2) {
            
            if(zeroes==-1)
                return 1;
            
            return 0;
        }
        
        grid[x][y] = -1;
        zeroes--;
        
        int paths = dfs(grid, x+1, y, m, n, zeroes) 
            + dfs(grid, x-1, y, m, n, zeroes) 
            + dfs(grid, x, y+1, m, n, zeroes) 
            + dfs(grid, x, y-1, m, n, zeroes);
        
        grid[x][y] = 0;
        
        return paths;
    }
public:
    int uniquePathsIII(vector<vector<int>>& grid) {
        
        int m = grid.size();
        int n = grid[0].size();
        
        int zeroes = 0;
        int startRow = 0;
        int startCol = 0;
        
        for(int i=0;i<m;++i) {
            
            for(int j=0;j<n;++j) {
                
                if(grid[i][j]==0) 
                    zeroes++;
                
                else if(grid[i][j]==1) {
                    startRow = i;
                    startCol = j;
                }
                
            }
        }
        
        
        int ans = dfs(grid, startRow, startCol, m, n, zeroes);
        
        return ans;
        
    }
};
