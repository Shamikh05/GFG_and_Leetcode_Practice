class Solution {
public:
    int networkDelayTime(vector<vector<int>>& times, int n, int k) {
        
        vector<pair<int, int>> adj[n+1];
        
        for(int i=0;i<times.size();++i) {
            adj[times[i][0]].push_back({times[i][1], times[i][2]});
        }
        
        vector<int> dist(n+1, INT_MAX);
        
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>> > pq;
        
        pq.push({0,k});
        dist[k] = 0;
        
        while(!pq.empty()) {
            
            auto it = pq.top();
            pq.pop();
            
            int distance = it.first;
            int node = it.second;
            
            for(auto it2 : adj[node]) {
                
                int adjNode = it2.first;
                int adjDist = it2.second;
                
                int newDist = dist[node] + adjDist;
                
                if(newDist < dist[adjNode]) {
                    pq.push({adjDist, adjNode});
                    dist[adjNode] = newDist;
                }
            }
            
        }
        
        int ans = INT_MIN;
        
        for(int i=1;i<=n;++i) {
            
            if(dist[i]==INT_MAX) return -1;
            
            ans = max(ans, dist[i]);
        }
        
        return ans;
    }
};
