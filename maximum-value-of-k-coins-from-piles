class Solution {
private:
    int compute(int idx, int k, vector<vector<int> > &piles, int n, vector<vector<int> > &dp) {
        
        if(k==0 or idx==n) 
            return 0;
        
        if(dp[idx][k] != -1) 
            return dp[idx][k];
        
        int res = 0;
        int sum = 0;
        
        int size = piles[idx].size();
        int coins = min(size, k);
        
        for(int i=0;i<=coins;++i) {
            if((i-1) >= 0) sum += piles[idx][i-1];
            res = max(res, sum + compute(idx + 1, k - i, piles, n, dp));
        }
        
        return dp[idx][k] = res;
    }
public:
    int maxValueOfCoins(vector<vector<int>>& piles, int k) {
        
        int n = piles.size();
        
        vector<vector<int> > dp(n, vector<int>(k+1,-1));
        
        int ans = compute(0, k, piles, n, dp);
        
        return ans;
    }
};
