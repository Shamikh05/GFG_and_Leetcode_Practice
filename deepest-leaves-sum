/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
private:
    void findSum(TreeNode* root, int level, int &ans) {
        
        if(!root) return;
        
        findSum(root->left, level-1, ans);
        findSum(root->right, level-1, ans);
        
        if(level <= 1) ans += root->val;
    }
    
    int findDepth(TreeNode* root) {
        
        if(!root) return 0;
        
        int leftDepth = findDepth(root->left);
        int rightDepth = findDepth(root->right);
        
        return 1 + max(leftDepth, rightDepth);
    }
public:
    int deepestLeavesSum(TreeNode* root) {
        
        int depth = findDepth(root);
        
        int ans = 0;
        
        findSum(root, depth, ans);
        
        return ans;
    }
};
