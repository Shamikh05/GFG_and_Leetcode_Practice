/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
    
    ListNode* reverseLL(ListNode* s, ListNode* e) {
        
        if(s==NULL || s->next==NULL)
            return s;
        
        ListNode* prev = e;
        ListNode* curr = s;
        ListNode* next;
        
        while(curr != e) {
            next = curr->next;
            curr->next = prev;
            prev = curr;
            curr = next;
        }
        
        return prev;
    }
    
public:
    
    ListNode* reverseKGroup(ListNode* head, int k) {
                
        if(k==1 || head==NULL || head->next==NULL) {
            return head;
        }
        
        ListNode* start = head;
        ListNode* end = start;
        int count = 0;
        
        ListNode* prev = end;
        
        
        while(end) {
            
            count++;
            
            if(count==k) {
                
                ListNode* reversePtr = reverseLL(start,end->next);
                
                if(prev==head)
                    head = reversePtr;
                else
                    prev->next = reversePtr;
                
                prev = start;
                start = start->next;
                end = start;
                count = 0;
            }
            else
                end = end->next;
        }
        
        return head;
    }
};

