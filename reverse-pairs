class Solution {
    
    int merge(vector<int>& nums, int low, int mid, int high) {
        
        int count = 0;
        
        int i = low;
        int j = mid + 1;
        
        for(i=low;i<=mid;i++) {
            
            while(j <= high and nums[i] > 2 * (long)nums[j]) {
                j++;
            }
            
            count += (j - (mid + 1));
        }
        
        i = low;
        j = mid + 1;
        
        vector<int> temp(high-low+1,0);
        int k = 0;
        
        while(i<=mid and j<=high) {
            
            if(nums[i] < nums[j])
                temp[k++] = nums[i++];
            else
                temp[k++] = nums[j++];
        }
        
        while(i<=mid) {
            temp[k++] = nums[i++];
        }
        
        while(j<=high) {
            temp[k++] = nums[j++];
        }
        
        for(i=low;i<=high;i++) {
            nums[i] = temp[i-low]; 
        }
        
        return count;
    }
    
    int merge_sort(vector<int>& nums, int low, int high) {
        
        if(low >= high)
            return 0;
        
        int mid = (low + high)/2;
        
        int ans = merge_sort(nums,low,mid);
        ans += merge_sort(nums,mid+1,high);
        
        ans += merge(nums,low,mid,high);
        
        return ans;
    }
    
public:
    int reversePairs(vector<int>& nums) {
        
        int n = nums.size();
        
        return merge_sort(nums,0,n-1);
        
    }
};
