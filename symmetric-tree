/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
private:
    bool checkMirror(TreeNode* leftTree, TreeNode* rightTree) {
        
        if(!leftTree and !rightTree) return true;
        if(!leftTree or !rightTree) return false;
        
        if(leftTree->val != rightTree->val) return false;
        
        bool checkLeft = checkMirror(leftTree->left, rightTree->right);
        bool checkRight = checkMirror(leftTree->right, rightTree->left);
        
        return (checkLeft and checkRight);
    }
public:
    bool isSymmetric(TreeNode* root) {
        
        if(!root->left and !root->right) return true;
        
        if(!root->left or !root->right) return false;
        
        return checkMirror(root->left, root->right);   
    }
};
