class Solution {
private:
    bool binary_search(vector<int> &v, int n, int target) {
        
        if(v[0]==target or v[n-1]==0) return true;
        
        int s = 0;
        int e = n - 1;
        
        while(s <= e) {
            
            int mid = (s + e) >> 1;
            
            if(target > v[mid]) s = mid + 1;
            else if(target < v[mid]) e = mid - 1;
            else return true;
        }
        return false;
    }
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        
        int n = matrix.size();
        int m = matrix[0].size();
        
        int s = 0;
        int e = n - 1;
        
        while(s <= e) {
            
            int mid = (s + e) >> 1;
            
            if(target > matrix[mid][0] and target > matrix[mid][m-1]) s = mid + 1;
            
            else if(target < matrix[mid][0] and target < matrix[mid][m-1]) e = mid - 1;
            
            else return binary_search(matrix[mid], m, target);
        }
        
        return false;
    }
};
